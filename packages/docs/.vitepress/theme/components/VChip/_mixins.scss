@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "./variables" as *;

@mixin chip-sizes {
  @each $scale-size, $scale-factor in $size-scales {
    $size: map.get($chip-sizes, "font-size") * (1 + $scale-factor);
    $height: map.get($chip-sizes, "height") * (1 + $scale-factor);
    $padding: math.round(math.div($height, $chip-padding-ratio));

    .v-chip.v-chip--size-#{$scale-size} {
      --v-chip-size: #{$size};
      --v-chip-height: #{$height};
      font-size: $size;
      padding: 0 $padding;

      .v-chip__prepend > svg {
        margin-inline-start: -$padding * 0.5;
        margin-inline-end: $padding * 0.5;
      }

      .v-chip__append > svg,
      .v-chip__close {
        margin-inline-start: $padding * 0.5;
        margin-inline-end: -$padding * 0.5;
      }

      .v-chip__append {
        + .v-chip__close {
          margin-inline-start: $padding;
        }
      }
    }
  }
}

@mixin chip-density {
  @each $density, $factor in $density-scales {
    .v-chip.v-chip--density-#{$density} {
      height: calc(var(--v-chip-height) + #{$factor});
    }
  }
}

@mixin chip-density($props, $density-scales) {
  @each $density, $multiplier in $density-scales {
    $value: calc(var(--v-chip-height) + #{$multiplier * $chip-spacer});

    &.v-chip--density-#{$density} {
      @if meta.type-of($props) == "list" {
        @each $prop in $props {
          #{$prop}: $value;
        }
      } @else {
        #{$props}: $value;
      }
    }
  }
}
