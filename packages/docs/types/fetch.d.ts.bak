




export declare function fetch(
  input: RequestInfo,
  init?: RequestInit
): Promise<Response>



export type BodyInit =
  // application/octet-stream
  | ArrayBuffer
  | AsyncIterable<Uint8Array>
  | Blob
  | Iterable<Uint8Array>
  | NodeJS.ArrayBufferView
  // multipart/form-data
  | FormData
  // application/x-www-form-urlencoded
  | URLSearchParams
  | null
  //  text/html, application/json,text/plain
  | string
export class BodyMixin {

}
type RequestDestination =
  | ''
  | 'audio'
  | 'audioworklet'
  | 'document'
  | 'embed'
  | 'font'
  | 'image'
  | 'manifest'
  | 'object'
  | 'paintworklet'
  | 'report'
  | 'script'
  | 'sharedworker'
  | 'style'
  | 'track'
  | 'video'
  | 'worker'
  | 'xslt'


export type ReferrerPolicy =
  | ''
  | 'no-referrer'
  | 'no-referrer-when-downgrade'
  | 'origin'
  | 'origin-when-cross-origin'
  | 'same-origin'
  | 'strict-origin'
  | 'strict-origin-when-cross-origin'
  | 'unsafe-url';


export type RequestCache =
  | 'default'
  | 'force-cache'
  | 'no-cache'
  | 'no-store'
  | 'only-if-cached'
  | 'reload'

export type RequestCredentials = 'omit' | 'include' | 'same-origin'



export class BodyInitConsumer {
  static create(body: BodyInit): BytesConsumer {
    if (body instanceof Blob) {
      return new BlobBytesConsumer(body);
    }

    if (body instanceof FormData) {
      return new FormDataBytesConsumer(body);
    }

    if (body instanceof URLSearchParams) {
      return new URLSearchParamsBytesConsumer(body);
    }
  }
}